{"version":3,"file":"index.js","sources":["../src/interfaces.ts","../src/v2/TreeUtils.ts","../src/v2/DefaultItemComponent.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/v2/TreeContext.ts","../src/v2/useTreeHandler.ts","../src/v2/Tree.tsx","../src/v2/JsonEditor.tsx"],"sourcesContent":["export interface Json {\n  [key: string]: any;\n}\n\nexport enum DataTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  array = \"array\",\n  object = \"object\",\n}\n\nexport interface TreeData {\n  key: string;\n  data_type: DataTypes;\n  selected: boolean;\n  sub_object: Array<TreeData>;\n}\n\nexport interface JsonArrayItem {\n  key: string;\n  value: Array<JsonArrayItem> | string | number | boolean;\n  path: string;\n  mode: string;\n  isObject: boolean;\n  selected: boolean;\n  type: string;\n  parent: Array<JsonArrayItem>;\n  level: number;\n}\n\nexport interface ArrayItem {\n  key: string;\n  response_value: string;\n  path: string;\n  selected: boolean;\n  display_format: string;\n  parent: ArrayItem;\n  level: number;\n  sub_object: ArrayItem[];\n}\n","import { DataTypes, Json } from \"../interfaces\";\n\nexport abstract class TreeUtils {\n  static convertJSONtoTree(\n    json: Json,\n    parent: Json | undefined,\n    parentKey = \"\",\n    level = 0,\n    parentIndex = 0\n  ): Json[] {\n    return Object.keys(json).map((item, idx) => {\n      const value = json[item];\n      const type = TreeUtils.getType(value);\n      const isList = Array.isArray(value);\n      const isObject = type === DataTypes.object || type === DataTypes.array;\n      const path = `${parentKey ? `${parentKey}.` : \"\"}${item}`;\n      const response_value =\n        type === DataTypes.object ||\n        (isList && !TreeUtils.isAllPrimitive(value))\n          ? \"\"\n          : value;\n      return {\n        setSubObject: function () {\n          this.sub_object = isObject\n            ? // Recursion\n              TreeUtils.convertJSONtoTree(\n                isList ? TreeUtils.getObjectFromList(value) : value,\n                this,\n                path,\n                level + 1,\n                idx\n              )\n            : [];\n          return this;\n        },\n        key: item,\n        path,\n        parent,\n        parentIndex,\n        level,\n        response_value,\n        selected: false,\n        display_format: type,\n        sub_object: [] as Json[],\n      }.setSubObject();\n    });\n  }\n\n  static convertTreetoJSON(tree: Json[]): Json {\n    return tree.reduce((json, treeItem) => {\n      json[treeItem.key] = treeItem.response_value;\n      if (treeItem.sub_object.length) {\n        // Recursion\n        const value = this.convertTreetoJSON(treeItem.sub_object);\n        json[treeItem.key] =\n          treeItem.display_format === DataTypes.array ? [value] : value;\n      }\n      return json;\n    }, {});\n  }\n\n  static transformTree = (\n    tree: Json[],\n    parent: Json | undefined,\n    level = 0,\n    parentIndex = 0\n  ): Json[] => {\n    return tree.map((item, idx) => {\n      item.parent = parent;\n      item.level = level;\n      item.parentIndex = parentIndex;\n      // Recursion\n      if (item.sub_object?.length)\n        item.sub_object = TreeUtils.transformTree(\n          item.sub_object,\n          item,\n          level + 1,\n          idx\n        );\n      return item;\n    });\n  };\n\n  static generateNewNode(parent: Json | undefined) {\n    return {\n      key: `key${parent?.sub_object.length || 0}`,\n      response_value: \"\",\n      display_format: \"string\",\n      sub_object: [],\n      path: parent?.path + \".key\",\n      level: parent?.level === undefined ? 0 : parent?.level + 1,\n      parent,\n    };\n  }\n  static isAllPrimitive(array: Json[]) {\n    return array.every((item) => typeof item !== DataTypes.object);\n  }\n\n  static getType(obj: Json) {\n    return Array.isArray(obj)\n      ? DataTypes.array\n      : typeof obj === DataTypes.object\n      ? DataTypes.object\n      : typeof obj;\n  }\n\n  static getObjectFromList(value: Json[]) {\n    return value.reduce((acc: Json, curr: Json) => {\n      if (TreeUtils.getType(curr) === DataTypes.object)\n        Object.keys(curr).forEach((objKey) => (acc[objKey] = curr[objKey]));\n      return acc;\n    }, {});\n  }\n}\n","import React from \"react\";\nimport { ArrayItem } from \"../interfaces\";\n\ninterface Props {\n  item: ArrayItem;\n  dataRef: ArrayItem[];\n  idx: number;\n  updateSelection: (dataRef: ArrayItem, checked: boolean) => void;\n  addSubItem: (dataRef: ArrayItem[], idx: number) => void;\n  updateNodeType: (dataRef: ArrayItem, value: string) => void;\n  removeNode: (dataRef: ArrayItem[], idx: number) => void;\n  updateKey: (item: ArrayItem, key: string) => void;\n}\n\nfunction DefaultItemComponent({\n  item,\n  dataRef,\n  idx,\n  updateSelection,\n  addSubItem,\n  updateNodeType,\n  removeNode,\n  updateKey,\n}: Props) {\n  return (\n    <>\n      <div\n        className=\"checkbox\"\n        style={{ transform: `translateX(-${32 * item.level}px)` }}\n      >\n        <input\n          type=\"checkbox\"\n          checked={item.selected}\n          onChange={(e) => updateSelection(dataRef?.[idx], e.target.checked)}\n        />\n      </div>\n      <div className=\"add\" onClick={() => addSubItem(dataRef, idx)}>\n        +\n      </div>\n      <div className=\"key\">\n        <input\n          value={item.key}\n          onChange={(e) => updateKey(item, e.target.value)}\n        />\n      </div>\n      <div className=\"type\">\n        <select\n          value={item.display_format}\n          style={{ width: 180 }}\n          onChange={(e) => {\n            updateNodeType(item, e.target.value);\n          }}\n        >\n          <option value=\"array\">Array</option>\n          <option value=\"string\">String</option>\n          <option value=\"object\">Object</option>\n          <option value=\"number\">Number</option>\n          <option value=\"boolean\">Boolean</option>\n        </select>\n      </div>\n      <div\n        className=\"remove\"\n        onClick={() => {\n          removeNode(dataRef, idx);\n        }}\n      >\n        âž–\n      </div>\n    </>\n  );\n}\n\nexport default DefaultItemComponent;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from \"react\";\nexport const TreeContext = React.createContext({} as any);\n","import React, { useCallback, useContext } from \"react\";\nimport { ArrayItem, DataTypes, Json } from \"../interfaces\";\nimport { TreeContext } from \"./TreeContext\";\nimport { TreeUtils } from \"./TreeUtils\";\n\nexport const useTreeHandler = () => {\n  const { stateUpdater, mainDataRef } = useContext(TreeContext);\n\n  const wrapper = useCallback((fn: any) => useCallback(fn, []), []);\n\n  const addItem = wrapper(\n    (dataRef: Json[] | undefined, parent: Json | undefined) => {\n      dataRef?.push(TreeUtils.generateNewNode(parent));\n      stateUpdater([...mainDataRef.current]);\n    }\n  );\n\n  const addSubItem = wrapper((dataRef: Json[] | undefined, idx: number) => {\n    if (!dataRef) return;\n    if (dataRef[idx].display_format !== DataTypes.array)\n      dataRef[idx].display_format = DataTypes.object;\n    const subObject = dataRef[idx].sub_object;\n    addItem(subObject, dataRef[idx]);\n  });\n\n  const selectAllChildren = wrapper(\n    (item: Json | undefined, checked: boolean) => {\n      item?.sub_object.forEach((subItem: Json) => {\n        subItem.selected = checked;\n        if (subItem.sub_object.length) updateSelection(subItem, checked);\n      });\n    }\n  );\n\n  const selectAllParent = wrapper(\n    (item: Json | undefined, checked: boolean) => {\n      if (!item?.parent) return;\n      if (item.parent?.parent) selectAllParent(item.parent, checked);\n      item.parent.selected = checked;\n    }\n  );\n\n  const updateSelection = wrapper(\n    (item: Json | undefined, checked: boolean) => {\n      if (!item) return;\n      item.selected = checked;\n      if (item?.sub_object.length) selectAllChildren(item, checked);\n      checked && selectAllParent(item, true);\n      stateUpdater([...mainDataRef.current]);\n    }\n  );\n\n  const updateNodeType = wrapper((item: Json, type: string) => {\n    item.display_format = type;\n    item.sub_object = [];\n    if (type === DataTypes.object)\n      item.sub_object = [TreeUtils.generateNewNode(item)];\n    stateUpdater([...mainDataRef.current]);\n  });\n\n  const removeNode = wrapper((itemList: Json[] | undefined, idx: number) => {\n    itemList?.splice(idx, 1);\n    stateUpdater([...mainDataRef.current]);\n  });\n\n  const updateKey = wrapper((item: ArrayItem, key: string) => {\n    updateNode(item, { key });\n  });\n\n  const updateNode = wrapper((item: Json, changes: Json) => {\n    item = Object.assign(item, changes);\n    stateUpdater([...mainDataRef.current]);\n  });\n\n  return {\n    updateSelection,\n    updateNodeType,\n    removeNode,\n    addSubItem,\n    addItem,\n    updateKey,\n  };\n};\n","// Tree - A Recursive react component\n// The Tree component that calls itself until its\n// exhausted of objects in the tree\n// Can be optimized and refactored a bit\nimport React from \"react\";\nimport { ArrayItem } from \"../interfaces\";\nimport DefaultItemComponent from \"./DefaultItemComponent\";\nimport \"./style.scss\";\nimport { useTreeHandler } from \"./useTreeHandler\";\n\ninterface JsonEditorProps {\n  data: ArrayItem[];\n  dataRef: ArrayItem[];\n  ItemComponent?: React.ComponentType<any>;\n}\n\nexport const JsonTree = ({ data, dataRef, ItemComponent }: JsonEditorProps) => {\n  const {\n    updateSelection,\n    updateNodeType,\n    removeNode,\n    addSubItem,\n    addItem,\n    updateKey,\n  } = useTreeHandler();\n\n  return (\n    <div className={`object`}>\n      {data.map((item, idx: number) => {\n        const rowProps = {\n          updateSelection,\n          updateNodeType,\n          removeNode,\n          updateKey,\n          addSubItem,\n          addItem,\n          item,\n          dataRef,\n          idx,\n        };\n        return (\n          <React.Fragment key={idx}>\n            <div\n              key={idx}\n              className={`item ${item.sub_object.length ? \"has-children\" : \"\"}`}\n            >\n              {ItemComponent ? (\n                <ItemComponent {...rowProps} />\n              ) : (\n                <DefaultItemComponent {...rowProps} />\n              )}\n              {!!item.sub_object.length && (\n                <JsonTree\n                  data={item.sub_object}\n                  dataRef={dataRef?.[idx].sub_object}\n                  ItemComponent={ItemComponent}\n                />\n              )}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default JsonTree;\n","import React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { ArrayItem, Json } from \"../interfaces\";\nimport { TreeUtils } from \"./TreeUtils\";\nimport JsonTree from \"./Tree\";\nimport { TreeContext } from \"./TreeContext\";\n\nexport const JsonEditor = forwardRef(function JsonEditor(\n  { data, ItemComponent }: Json,\n  ref\n) {\n  if (!data) return null;\n  const [treeData, setTreeData] = useState(\n    TreeUtils.convertJSONtoTree(data, undefined)\n  );\n  const mainDataRef = useRef(treeData);\n\n  useEffect(() => {\n    const newData = TreeUtils.convertJSONtoTree(data, undefined);\n    setTreeData(newData);\n    mainDataRef.current = newData;\n  }, [data]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      getJson: () => TreeUtils.convertTreetoJSON(mainDataRef.current),\n      getTree: () => mainDataRef.current,\n    }),\n    []\n  );\n\n  if (!treeData) return null;\n\n  return (\n    <TreeContext.Provider\n      value={{\n        stateUpdater: setTreeData,\n        mainDataRef,\n      }}\n    >\n      <div className={`schema-editor ${ItemComponent ? \"custom\" : \"default\"}`}>\n        <form noValidate>\n          <JsonTree\n            data={treeData as ArrayItem[]}\n            dataRef={mainDataRef.current as ArrayItem[]}\n            ItemComponent={ItemComponent}\n          />\n        </form>\n      </div>\n    </TreeContext.Provider>\n  );\n});\n"],"names":["DataTypes","TreeUtils","convertJSONtoTree","json","parent","parentKey","level","parentIndex","Object","keys","map","item","idx","value","type","getType","isList","Array","isArray","isObject","object","array","path","response_value","isAllPrimitive","setSubObject","this","sub_object","getObjectFromList","key","selected","display_format","convertTreetoJSON","tree","reduce","treeItem","length","generateNewNode","undefined","every","obj","acc","curr","forEach","objKey","DefaultItemComponent","dataRef","updateSelection","addSubItem","updateNodeType","removeNode","updateKey","React","createElement","Fragment","className","style","transform","checked","onChange","e","target","onClick","width","styleInject","css","ref","head","insertAt","document","getElementsByTagName","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","transformTree","_a","TreeContext","createContext","useTreeHandler","stateUpdater","mainDataRef","useContext","wrapper","useCallback","fn","addItem","push","current","subObject","selectAllChildren","subItem","selectAllParent","itemList","splice","updateNode","changes","assign","JsonTree","data","ItemComponent","rowProps","JsonEditor","forwardRef","treeData","setTreeData","useState","useRef","useEffect","newData","useImperativeHandle","getJson","getTree","Provider","noValidate"],"mappings":"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"}