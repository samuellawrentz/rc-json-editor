{"version":3,"file":"index.js","sources":["../src/JsonArrayClass.ts","../src/Tree.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/JsonTree.tsx"],"sourcesContent":["// Class JsonArray\n// Is the key class that creates a new datatype called JsonArray\n// Looks like an Array, works like an Array, but with custom methods\n// Concepts used - Inheritance, Recursion, OOP\nimport { Json } from \"./interfaces\";\n\nexport class JsonArray extends Array {\n  path: string;\n  _updateTree: (state?: JsonArray) => void;\n\n  constructor(json: Json, path = \"\", stateUpdater: (state: any) => void) {\n    super();\n    if (typeof json !== \"object\") return;\n\n    this.path = path;\n    this._updateTree = () => stateUpdater({ value: this });\n    this._updateArray(json);\n  }\n\n  // util Method\n  static convertToJSON(treeData: JsonArray) {\n    return treeData.reduce((acc, data) => {\n      if (data.type === \"object\")\n        // Recursive call, if type is object\n        acc[data.key] = JsonArray.convertToJSON(data.value);\n      else acc[data.key] = data.value;\n      return acc;\n    }, {});\n  }\n\n  // Inserts a node at the given index\n  addNode(idx: number, json: Json) {\n    this._updateArray(json, idx);\n    this._updateTree();\n    return this;\n  }\n\n  // Inserts a sub-node at the given index\n  addSubNode(idx: number, json: Json) {\n    if (this[idx].type === \"object\") return this[idx].value.addNode(0, json);\n    this._updateArray(json, idx, true);\n    this._updateTree();\n    return this;\n  }\n\n  deleteNode(idx: number) {\n    this.splice(idx, 1);\n    this._updateTree();\n    return this;\n  }\n\n  // Update individual node\n  updateNode(index: number, key?: string, value?: string) {\n    try {\n      if (key !== undefined) this[index].key = key;\n      if (value !== undefined) this[index].value = value;\n    } catch (e) {\n      console.log(e);\n    }\n    this._updateTree(this);\n    return this;\n  }\n\n  // Factory method that creates a node\n  // #private method\n  _createNode(key: string, json: Json) {\n    const isObject = typeof json[key] === \"object\";\n    const xPath = `${this.path}[${this.length}]`;\n    return {\n      key,\n      type: typeof json[key],\n      path: xPath,\n      value: isObject\n        ? // Recursion if object\n          new JsonArray(json[key], xPath + \".value\", this._updateTree)\n        : json[key],\n    };\n  }\n\n  // Internal method that is used to update the array based on the propd\n  // #private method\n  _updateArray(json: Json, idx?: any, subNode?: boolean): void {\n    Object.keys(json).forEach((key) => {\n      const prop = this._createNode(key, json);\n      // If index is present, insert at index\n      // Or push at the end\n\n      if (subNode) {\n        this[idx].type = \"object\";\n        this[idx].value = new JsonArray(\n          json,\n          this[idx].path + \".value\",\n          this._updateTree\n        );\n      } else if (idx) this.splice(idx, 0, prop);\n      else this.push(prop);\n    });\n  }\n}\n","// Tree - A Recursive react component\n// The Tree component that calls itself until its\n// exhausted of objects in the tree\n// Can be optimized and refactored a bit\nimport React, { useState } from \"react\";\nimport { JsonArray } from \"./JsonArrayClass\";\n\ninterface Props {\n  data: JsonArray;\n}\n\nexport const Tree = ({ data, ...props }: Props) => {\n  return (\n    <div className=\"group\">\n      {data.map((item, idx) => {\n        return (\n          <div key={item.path} className=\"child node-row\">\n            <span\n              onClick={(e) => {\n                data.addSubNode(idx, { key: \"value\" });\n              }}\n            >\n              {\"âž•\"}\n            </span>\n            <input\n              value={item.key}\n              onChange={(e) => {\n                data.updateNode(idx, e.target.value);\n              }}\n            />\n            <span className=\"spacer\"></span>\n            {item.type === \"object\" ? (\n              <>\n                <input value={\"Object\"} disabled />\n                <span onClick={() => data.deleteNode(idx)}>ðŸ—‘</span>\n                {/* Recursion */}\n                <Tree data={item.value} {...props} />\n              </>\n            ) : (\n              <>\n                <input\n                  value={item.value}\n                  onChange={(e) => {\n                    data.updateNode(idx, undefined, e.target.value);\n                  }}\n                />\n                <span onClick={() => data.deleteNode(idx)}>ðŸ—‘</span>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState } from \"react\";\nimport { Json } from \"./interfaces\";\nimport { JsonArray } from \"./JsonArrayClass\";\nimport { Tree } from \"./Tree\";\nimport \"./style.scss\";\n\n// Component that acts as a state adapter\n// Handles interactions between the tree and the parent component\n\ninterface State {\n  value: JsonArray | never[];\n}\n\ninterface Props {\n  data: Json;\n  onChange?: (state: JsonArray | never[]) => void;\n}\nexport class TreeWrapper extends React.Component<Props, State> {\n  jsonTree: JsonArray;\n  constructor(props: Props) {\n    super(props);\n    this.jsonTree = new JsonArray(props.data, \"\", this.setState.bind(this));\n    this.state = {\n      value: [],\n    };\n  }\n  componentDidUpdate(_: Props, pState: State) {\n    if (this.state !== pState) this.props.onChange?.(this.state.value);\n  }\n  render() {\n    return (\n      <div className=\"react-json-tree\">\n        <Tree data={this.jsonTree} />\n      </div>\n    );\n  }\n}\n\nexport default TreeWrapper;\n"],"names":["React"],"mappings":"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"}