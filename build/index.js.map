{"version":3,"file":"index.js","sources":["../src/interfaces.ts","../src/v2/TreeUtils.ts","../src/v2/DefaultItemComponent.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/v2/Tree.tsx","../src/v2/useTreeHandler.ts","../src/v2/JsonEditor.tsx"],"sourcesContent":["export interface Json {\n  [key: string]: any;\n}\n\nexport enum DataTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  list = \"list\",\n  object = \"object\",\n  listOfStrings = \"list of strings\",\n  listOfNumbers = \"list of numbers\",\n  listOfBooleans = \"list of booleans\",\n}\n\nexport const DefaultValues = {\n  string: \"\",\n  number: 0,\n  boolean: true,\n  list: [],\n  listOfStrings: [\"string\"],\n  listOfNumbers: [0],\n  listOfBooleans: [true],\n  object: {},\n};\n\nexport interface TreeData {\n  key: string;\n  data_type: DataTypes;\n  selected: boolean;\n  sub_object: Array<TreeData>;\n}\n\nexport interface JsonArrayItem {\n  key: string;\n  value: Array<JsonArrayItem> | string | number | boolean;\n  path: string;\n  mode: string;\n  isObject: boolean;\n  selected: boolean;\n  type: string;\n  parent: Array<JsonArrayItem>;\n  level: number;\n}\nexport interface TreeMethods {\n  updateSelection: (siblings: ArrayItem, checked: boolean) => void;\n  addSubItem: (siblings: ArrayItem[], idx: number) => void;\n  updateNodeType: (siblings: ArrayItem, value: string) => void;\n  removeNode: (siblings: ArrayItem[], idx: number) => void;\n  updateKey: (item: ArrayItem, key: string) => void;\n  updateValue?: (item: ArrayItem, response_value: string) => void;\n}\n\nexport interface ArrayItem {\n  key: string;\n  response_value: string;\n  path: string;\n  selected: boolean;\n  display_format: string;\n  data_type?: string;\n  parent: ArrayItem;\n  level: number;\n  sub_object: ArrayItem[];\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { DataTypes, DefaultValues, Json } from \"../interfaces\";\n\nexport abstract class TreeUtils {\n  static convertJSONtoTree(\n    json: Json,\n    parent: Json | undefined,\n    parentKey = \"\",\n    level = 0,\n    parentIndex = 0\n  ): Json[] {\n    return Object.keys(json).map((item, idx) => {\n      const value = json[item];\n\n      const type = TreeUtils.getType(value);\n      const isList = Array.isArray(value);\n      const isObject = type === DataTypes.object || type === DataTypes.list;\n      const path = `${parentKey ? `${parentKey}.` : \"\"}${item}`;\n      const isAllPrimitive = isList && !TreeUtils.isAllPrimitive(value);\n      const response_value =\n        type === DataTypes.object || isAllPrimitive ? \"\" : value;\n\n      return {\n        setSubObject: function () {\n          this.sub_object = isObject\n            ? // Recursion\n              TreeUtils.convertJSONtoTree(\n                isList ? TreeUtils.getObjectFromList(value) : value,\n                this,\n                path,\n                level + 1,\n                idx\n              )\n            : [];\n          return this;\n        },\n        key: item,\n        response_key: path,\n        parent,\n        parentIndex,\n        level,\n        response_value,\n        selected: false,\n        data_type: type,\n        sub_object: [] as Json[],\n      }.setSubObject();\n    });\n  }\n\n  // Util method to get JSON from the tree/attribute data\n  static convertTreetoJSON = (tree: Json[]): Json => {\n    return tree.reduce((json, treeItem) => {\n      const key = treeItem.key ?? treeItem.response_key.match(/\\w+$/g)?.[0];\n      //@ts-ignore\n      json[key] = treeItem.response_value || DefaultValues[treeItem.data_type];\n      if (treeItem?.sub_object?.length) {\n        // Recursion\n        let value;\n        if (treeItem.data_type === DataTypes.list)\n          value = [TreeUtils.convertTreetoJSON(treeItem.sub_object)];\n        else value = TreeUtils.convertTreetoJSON(treeItem.sub_object);\n        json[key] = value;\n      }\n      return json;\n    }, {});\n  };\n\n  static transformTree = (\n    tree: Json[],\n    parent: Json | undefined,\n    level = 0,\n    parentIndex = 0\n  ): Json[] => {\n    return tree.map((item, idx) => {\n      item.parent = parent;\n      item.level = level;\n      item.parentIndex = parentIndex;\n      // Recursion\n      if (item.sub_object?.length)\n        item.sub_object = TreeUtils.transformTree(\n          item.sub_object,\n          item,\n          level + 1,\n          idx\n        );\n      return item;\n    });\n  };\n\n  static cleanTree = (\n    tree: Json[],\n    removeResponseKey = true,\n    isRequestBody = false\n  ): Json[] => {\n    return tree.map((item) => {\n      item.parent = item.path = item.level = item.parentIndex = undefined;\n      if (removeResponseKey) item.response_key = undefined;\n      if (isRequestBody) {\n        item.selected = undefined;\n        item.value = item?.response_value;\n      }\n      item.response_value = undefined;\n      // Recursion\n      if (item.sub_object?.length)\n        item.sub_object = TreeUtils.cleanTree(\n          item.sub_object,\n          removeResponseKey,\n          isRequestBody\n        );\n      return item;\n    });\n  };\n\n  static generateNewNode(\n    parent: Json | undefined,\n    length?: number | undefined\n  ) {\n    return {\n      key: `key${parent?.sub_object.length || length || 0}`,\n      response_value: \"value\",\n      data_type: \"string\",\n      sub_object: [],\n      path: parent?.path + \".key\",\n      level: parent?.level === undefined ? 0 : parent?.level + 1,\n      parent,\n    };\n  }\n\n  static isAllPrimitive(array: Json[]) {\n    return array.every((item) => typeof item !== DataTypes.object);\n  }\n\n  static getPrimitiveArrayType(arr: any[]) {\n    if (!arr.length) return DataTypes.list;\n    if (typeof arr[0] === \"boolean\") return DataTypes.listOfBooleans;\n    if (typeof arr[0] === \"string\") return DataTypes.listOfStrings;\n    if (typeof arr[0] === \"number\") return DataTypes.listOfNumbers;\n  }\n\n  static getType(obj: Json) {\n    if (obj === null || obj === undefined) return \"string\";\n    return Array.isArray(obj)\n      ? TreeUtils.isAllPrimitive(obj)\n        ? this.getPrimitiveArrayType(obj)\n        : DataTypes.list\n      : typeof obj === DataTypes.object\n      ? DataTypes.object\n      : typeof obj;\n  }\n\n  static getObjectFromList(value: Json[]) {\n    return value.reduce((acc: Json, curr: Json) => {\n      if (TreeUtils.getType(curr) === DataTypes.object)\n        Object.keys(curr).forEach((objKey) => {\n          if (curr[objKey]?.length !== 0) acc[objKey] = curr[objKey];\n        });\n      return acc;\n    }, {});\n  }\n}\n","import React from \"react\";\nimport { ArrayItem } from \"../interfaces\";\n\ninterface Props {\n  item: ArrayItem;\n  siblings: ArrayItem[];\n  idx: number;\n  updateSelection: (siblings: ArrayItem, checked: boolean) => void;\n  addSubItem: (siblings: ArrayItem[], idx: number) => void;\n  updateNodeType: (siblings: ArrayItem, value: string) => void;\n  removeNode: (siblings: ArrayItem[], idx: number) => void;\n  updateKey: (item: ArrayItem, key: string) => void;\n  updateValue?: (item: ArrayItem, response_value: string) => void;\n}\n\nfunction DefaultItemComponent({\n  item,\n  siblings,\n  idx,\n  updateSelection,\n  addSubItem,\n  updateNodeType,\n  removeNode,\n  updateKey,\n}: Props) {\n  return (\n    <>\n      <div\n        className=\"checkbox\"\n        style={{ transform: `translateX(-${32 * item.level}px)` }}\n      >\n        <input\n          type=\"checkbox\"\n          checked={item.selected}\n          onChange={(e) => updateSelection(siblings?.[idx], e.target.checked)}\n        />\n      </div>\n      <div className=\"add\" onClick={() => addSubItem(siblings, idx)}>\n        +\n      </div>\n      <div className=\"key\">\n        <input\n          value={item.key}\n          onChange={(e) => updateKey(item, e.target.value)}\n        />\n      </div>\n      <div className=\"type\">\n        <select\n          value={item.data_type}\n          style={{ width: 180 }}\n          onChange={(e) => {\n            updateNodeType(item, e.target.value);\n          }}\n        >\n          <option value=\"list\">Array</option>\n          <option value=\"list of strings\">Array of Strings</option>\n          <option value=\"list of numbers\">Array of Numbers</option>\n          <option value=\"list of booleans\">Array of Booleans</option>\n          <option value=\"string\">String</option>\n          <option value=\"object\">Object</option>\n          <option value=\"number\">Number</option>\n          <option value=\"boolean\">Boolean</option>\n        </select>\n      </div>\n      <div\n        className=\"remove\"\n        onClick={() => {\n          removeNode(siblings, idx);\n        }}\n      >\n        âž–\n      </div>\n    </>\n  );\n}\n\nexport default DefaultItemComponent;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// Tree - A Recursive react component\n// The Tree component that calls itself until its\n// exhausted of objects in the tree\n// Can be optimized and refactored a bit\nimport React from \"react\";\nimport { ArrayItem, Json, TreeMethods } from \"../interfaces\";\nimport DefaultItemComponent from \"./DefaultItemComponent\";\nimport \"./style.scss\";\nimport { useTreeHandler } from \"./useTreeHandler\";\n\ninterface JsonEditorProps {\n  data: ArrayItem[];\n  ItemComponent?: React.ComponentType<any>;\n  stateUpdater: (data: Json[]) => void;\n  treeMethods: TreeMethods;\n}\n\nexport const JsonTree = ({\n  data,\n  ItemComponent,\n  stateUpdater,\n  treeMethods,\n}: JsonEditorProps) => {\n  return (\n    <div className={`object`}>\n      {data.map((item, idx: number) => {\n        const rowProps = {\n          siblings: data,\n          item,\n          idx,\n          ...treeMethods,\n        };\n        const RowComponent = ItemComponent || DefaultItemComponent;\n        return (\n          <React.Fragment key={idx}>\n            <div\n              key={idx}\n              className={`item ${\n                item.sub_object?.length ? \"has-children\" : \"\"\n              }`}\n            >\n              <RowComponent {...rowProps} />\n\n              {!!item.sub_object?.length && (\n                <JsonTree\n                  data={item.sub_object}\n                  ItemComponent={ItemComponent}\n                  stateUpdater={stateUpdater}\n                  treeMethods={treeMethods}\n                />\n              )}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default JsonTree;\n","import { useCallback } from \"react\";\nimport { ArrayItem, DataTypes, Json } from \"../interfaces\";\nimport { TreeUtils } from \"./TreeUtils\";\n\nexport const useTreeHandler = (stateUpdater: (data: any) => void) => {\n  const wrapper = useCallback((fn: any) => useCallback(fn, []), []);\n\n  const addItem = wrapper((siblingsList: Json[], parent: Json | undefined) => {\n    stateUpdater((treeData: Json[]) => {\n      siblingsList?.push(\n        TreeUtils.generateNewNode(parent, siblingsList?.length)\n      );\n      return [...treeData];\n    });\n  });\n\n  const addSubItem = wrapper(\n    (siblingsList: Json[] | undefined, idx: number) => {\n      if (!siblingsList) return;\n      if (siblingsList[idx].data_type !== DataTypes.list)\n        siblingsList[idx].data_type = DataTypes.object;\n      siblingsList[idx].response_value = \"\";\n      const subObject = siblingsList[idx].sub_object;\n      addItem(subObject, siblingsList[idx]);\n    }\n  );\n\n  const selectAllChildren = wrapper(\n    (item: Json | undefined, checked: boolean) => {\n      item?.sub_object.forEach((subItem: Json) => {\n        subItem.selected = checked;\n        if (subItem?.sub_object?.length) updateSelection(subItem, checked);\n      });\n    }\n  );\n\n  const selectAllParent = wrapper(\n    (item: Json | undefined, checked: boolean) => {\n      if (!item?.parent) return;\n      if (item.parent?.parent) selectAllParent(item?.parent, checked);\n      item.parent.selected = checked;\n    }\n  );\n\n  const selectAll = wrapper((checked: boolean) => {\n    stateUpdater((treeData: Json[]) => {\n      treeData.forEach((item) => {\n        item.selected = checked;\n        if (item?.sub_object?.length) selectAllChildren(item, checked);\n      });\n      return [...treeData];\n    });\n  });\n\n  const updateSelection = wrapper(\n    (item: Json | undefined, checked: boolean) => {\n      stateUpdater((treeData: Json[]) => {\n        if (!item) return treeData;\n        item.selected = checked;\n        if (item?.sub_object?.length) selectAllChildren(item, checked);\n        checked && selectAllParent(item, true);\n        return [...treeData];\n      });\n    }\n  );\n\n  const updateNodeType = wrapper((item: Json, type: string) => {\n    stateUpdater((treeData: Json[]) => {\n      item.data_type = type;\n      item.sub_object = [];\n      if (type === DataTypes.object)\n        item.sub_object = [TreeUtils.generateNewNode(item)];\n      return [...treeData];\n    });\n  });\n\n  const removeNode = wrapper((itemList: Json[] | undefined, idx: number) => {\n    stateUpdater((treeData: Json[]) => {\n      itemList?.splice(idx, 1);\n      return [...treeData];\n    });\n  });\n\n  const updateKey = wrapper((item: ArrayItem, key: string) => {\n    updateNode(item, { key });\n  });\n\n  const updateValue = wrapper((item: ArrayItem, value: string) => {\n    updateNode(item, { response_value: value });\n  });\n\n  const updateNode = wrapper((item: Json, changes: Json) => {\n    stateUpdater((treeData: Json[]) => {\n      item = Object.assign(item, changes);\n      return [...treeData];\n    });\n  });\n\n  return {\n    updateSelection,\n    updateNodeType,\n    removeNode,\n    addSubItem,\n    addItem,\n    updateKey,\n    updateValue,\n    selectAll,\n  };\n};\n","import React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { ArrayItem, Json } from \"../interfaces\";\nimport { TreeUtils } from \"./TreeUtils\";\nimport JsonTree from \"./Tree\";\nimport { useTreeHandler } from \"./useTreeHandler\";\n\nexport const JsonEditor = forwardRef(function JsonEditor(\n  { data, ItemComponent, fromTree, onChange, viewFrom }: Json,\n  ref\n) {\n  if (!data) return null;\n  const [treeData, setTreeData] = useState([] as Json[]);\n  const isTreeUpdated = useRef(false);\n  const stateUpdater = (data: Json[]) => {\n    isTreeUpdated.current = true;\n    setTreeData(data);\n  };\n  const treeMethods = useTreeHandler(stateUpdater);\n\n  // Update the tree on props change\n  useEffect(() => {\n    const newData = fromTree\n      ? TreeUtils.transformTree(data, undefined)\n      : TreeUtils.convertJSONtoTree(data, undefined);\n    setTreeData(newData);\n  }, [data]);\n\n  useEffect(() => {\n    isTreeUpdated.current && onChange?.(treeData);\n    isTreeUpdated.current = false;\n  });\n\n  // Expose certain methods via ref\n  useImperativeHandle(\n    ref,\n    () => ({\n      getJson: () => TreeUtils.convertTreetoJSON([...treeData]),\n      getTree: () => [...treeData],\n      selectAll: treeMethods.selectAll,\n      updateSelection: treeMethods.updateSelection,\n    }),\n    []\n  );\n\n  if (!treeData.length) return null;\n\n  return (\n    <div className={`schema-editor ${ItemComponent ? \"custom\" : \"default\"}`}>\n      <JsonTree\n        data={treeData as ArrayItem[]}\n        ItemComponent={ItemComponent}\n        stateUpdater={stateUpdater}\n        treeMethods={treeMethods}\n      />\n    </div>\n  );\n});\n"],"names":["DataTypes","DefaultValues","string","number","boolean","list","listOfStrings","listOfNumbers","listOfBooleans","object","TreeUtils","convertJSONtoTree","json","parent","parentKey","level","parentIndex","Object","keys","map","item","idx","value","type","getType","isList","Array","isArray","isObject","path","isAllPrimitive","response_value","setSubObject","this","sub_object","getObjectFromList","key","response_key","selected","data_type","generateNewNode","length","undefined","array","every","getPrimitiveArrayType","arr","obj","reduce","acc","curr","forEach","objKey","_a","DefaultItemComponent","siblings","updateSelection","addSubItem","updateNodeType","removeNode","updateKey","React","createElement","Fragment","className","style","transform","checked","onChange","e","target","onClick","width","styleInject","css","ref","head","insertAt","document","getElementsByTagName","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","convertTreetoJSON","tree","treeItem","_b","match","_c","let","transformTree","cleanTree","removeResponseKey","isRequestBody","JsonTree","data","ItemComponent","stateUpdater","treeMethods","rowProps","assign","useTreeHandler","wrapper","useCallback","fn","addItem","siblingsList","push","treeData","subObject","selectAllChildren","subItem","selectAllParent","selectAll","itemList","splice","updateNode","updateValue","changes","JsonEditor","forwardRef","fromTree","setTreeData","useState","isTreeUpdated","useRef","current","useEffect","newData","useImperativeHandle","getJson","getTree"],"mappings":"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"}