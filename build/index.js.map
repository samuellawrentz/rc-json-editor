{"version":3,"file":"index.js","sources":["../src/JsonArrayClass.ts","../src/Tree.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/JsonEditor.tsx"],"sourcesContent":["// Class JsonArray\n// Is the key class that creates a new datatype called JsonArray\n// Looks like an Array, works like an Array, but with custom methods\n// Concepts used - Inheritance, Recursion, OOP\nimport { Json } from \"./interfaces\";\n\nexport class JsonArray extends Array {\n  path: string;\n  _updateTree: (state?: JsonArray) => void;\n\n  constructor(json: Json, path = \"\", stateUpdater: (state: any) => void) {\n    super();\n    if (typeof json !== \"object\") return;\n\n    this.path = path;\n    this._updateTree = () => stateUpdater({ value: this });\n    this._updateArray(json);\n  }\n\n  // util Method\n  static convertToJSON(treeData: JsonArray) {\n    return treeData.reduce((acc, data) => {\n      if (data.type === \"object\")\n        // Recursive call, if type is object\n        acc[data.key] = JsonArray.convertToJSON(data.value);\n      else acc[data.key] = data.value;\n      return acc;\n    }, {});\n  }\n\n  // Inserts a node at the given index\n  addNode(idx: number, json: Json) {\n    this._updateArray(json, idx);\n    this._updateTree();\n    return this;\n  }\n\n  // Inserts a sub-node at the given index\n  addSubNode(idx: number, json: Json) {\n    if (this[idx].type === \"object\") return this[idx].value.addNode(0, json);\n    this._updateArray(json, idx, true);\n    this._updateTree();\n    return this;\n  }\n\n  deleteNode(idx: number) {\n    this.splice(idx, 1);\n    this._updateTree();\n    return this;\n  }\n\n  // Update individual node\n  updateNode(index: number, key?: string, value?: string) {\n    try {\n      if (key !== undefined) this[index].key = key;\n      if (value !== undefined) this[index].value = value;\n    } catch (e) {\n      console.log(e);\n    }\n    this._updateTree(this);\n    return this;\n  }\n\n  // Factory method that creates a node\n  // #private method\n  _createNode(key: string, json: Json) {\n    const isObject = typeof json[key] === \"object\";\n    const xPath = `${this.path}[${this.length}]`;\n    const level = (xPath.match(/value/g) || []).length;\n    return {\n      key,\n      level,\n      type: typeof json[key],\n      path: xPath,\n      value: isObject\n        ? // Recursion if object\n          new JsonArray(json[key], xPath + \".value\", this._updateTree)\n        : json[key],\n    };\n  }\n\n  // Internal method that is used to update the array based on the propd\n  // #private method\n  _updateArray(json: Json, idx?: any, subNode?: boolean): void {\n    Object.keys(json).forEach((key) => {\n      const prop = this._createNode(key, json);\n      // If index is present, insert at index\n      // Or push at the end\n\n      if (subNode) {\n        this[idx].type = \"object\";\n        this[idx].value = new JsonArray(\n          json,\n          this[idx].path + \".value\",\n          this._updateTree\n        );\n      } else if (idx) this.splice(idx, 0, prop);\n      else this.push(prop);\n    });\n  }\n}\n","// Tree - A Recursive react component\n// The Tree component that calls itself until its\n// exhausted of objects in the tree\n// Can be optimized and refactored a bit\nimport React, { useState } from \"react\";\nimport { JsonArray } from \"./JsonArrayClass\";\n\ninterface Props {\n  data: JsonArray;\n}\n\nexport const Tree = ({ data, ...props }: Props) => {\n  return (\n    <div className=\"group\">\n      {data.map((item, idx) => {\n        const isObject = item.type === \"object\";\n        return (\n          <div key={item.path} className=\"child node-row\">\n            <div className=\"row-items\">\n              <span\n                className=\"checkbox\"\n                style={{\n                  transform: `translate(-${item.level * 32 + 32}px, 2px)`,\n                }}\n              >\n                <input type={\"checkbox\"} />\n              </span>\n              <span\n                className=\"plus\"\n                onClick={(e) => {\n                  data.addSubNode(idx, { key: \"value\" });\n                }}\n              >\n                {\"âž•\"}\n              </span>\n              <input\n                value={item.key}\n                onChange={(e) => {\n                  data.updateNode(idx, e.target.value);\n                }}\n              />\n              <input\n                value={isObject ? \"Object\" : item.value}\n                disabled={isObject}\n                onChange={(e) => {\n                  data.updateNode(idx, undefined, e.target.value);\n                }}\n              />\n              <span onClick={() => data.deleteNode(idx)}>ðŸ—‘</span>\n            </div>\n            {isObject && <Tree data={item.value} {...props} />}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState } from \"react\";\nimport { Json } from \"./interfaces\";\nimport { JsonArray } from \"./JsonArrayClass\";\nimport { Tree } from \"./Tree\";\nimport \"./style.scss\";\n\n// Component that acts as a state adapter\n// Handles interactions between the tree and the parent component\n\ninterface State {\n  value: JsonArray | never[];\n}\n\ninterface Props {\n  data: Json;\n  onChange?: (state: JsonArray | never[]) => void;\n  hasSelection?: boolean;\n}\nexport class JsonEditor extends React.Component<Props, State> {\n  jsonTree: JsonArray;\n  constructor(props: Props) {\n    super(props);\n    this.jsonTree = new JsonArray(props.data, \"\", this.setState.bind(this));\n    this.state = {\n      value: [],\n    };\n  }\n  componentDidUpdate(_: Props, pState: State) {\n    if (this.state !== pState) this.props.onChange?.(this.state.value);\n  }\n  render() {\n    return (\n      <div\n        className={`react-json-tree ${\n          this.props.hasSelection ? \"has-selection\" : \"\"\n        }`}\n      >\n        <Tree data={this.jsonTree} />\n      </div>\n    );\n  }\n}\n\nexport default JsonEditor;\n"],"names":["JsonArray","Array","constructor","json","path","stateUpdater","super","this","_updateTree","value","_updateArray","convertToJSON","treeData","reduce","acc","data","type","key","addNode","idx","addSubNode","deleteNode","splice","updateNode","index","undefined","e","console","log","_createNode","isObject","xPath","length","level","match","subNode","Object","keys","forEach","prop","push","Tree","_a","props","__rest","React","createElement","className","map","item","style","transform","onClick","onChange","target","disabled","assign","styleInject","css","ref","head","insertAt","document","getElementsByTagName","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","JsonEditor","Component","jsonTree","setState","bind","state","componentDidUpdate","_","pState","_b","call","render","hasSelection"],"mappings":"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"}