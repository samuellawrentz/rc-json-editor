{"version":3,"file":"index.es.js","sources":["../src/JsonArrayClass.ts","../src/Tree.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/JsonEditor.tsx"],"sourcesContent":["// Class JsonArray\n// Is the key class that creates a new datatype called JsonArray\n// Looks like an Array, works like an Array, but with custom methods\n// Concepts used - Inheritance, Recursion, OOP\nimport { Json } from \"./interfaces\";\n\nexport class JsonArray extends Array {\n  path: string;\n  _updateTree: (state?: JsonArray) => void;\n\n  constructor(json?: Json, path = \"\", stateUpdater?: (state: any) => void) {\n    super();\n    if (typeof json !== \"object\") return;\n\n    this.path = path;\n    this._updateTree = () => stateUpdater?.({ value: this });\n    this._updateArray(json);\n  }\n\n  // util Method\n  static convertToJSON(treeData: JsonArray) {\n    return treeData.reduce((acc, data) => {\n      if (data.type === \"object\")\n        // Recursive call, if type is object\n        acc[data.key] = JsonArray.convertToJSON(data.value);\n      else acc[data.key] = data.value;\n      return acc;\n    }, {});\n  }\n\n  // Inserts a node at the given index\n  addNode(idx: number, json: Json) {\n    this._updateArray(json, idx);\n    this._updateTree();\n    return this;\n  }\n\n  // Inserts a sub-node at the given index\n  addSubNode(idx: number) {\n    if (this[idx].type === \"object\") {\n      return this[idx].value.addNode(0, {\n        [`key${this[idx].value.length}`]: \"value\",\n      });\n    }\n    this._updateArray({ key: \"value\" }, idx, true);\n    this._updateTree();\n    return this;\n  }\n\n  deleteNode(idx: number) {\n    this.splice(idx, 1);\n    this._updateTree();\n    return this;\n  }\n\n  // Update individual node\n  updateNode(index: number, key?: string, value?: string) {\n    try {\n      if (key !== undefined) this[index].key = key;\n      if (value !== undefined) this[index].value = value;\n    } catch (e) {\n      console.log(e);\n    }\n    this._updateTree(this);\n    return this;\n  }\n\n  // Factory method that creates a node\n  // #private method\n  _createNode(key: string, json: Json) {\n    const isObject = typeof json[key] === \"object\";\n    const xPath = `${this.path}[${this.length}]`;\n    const level = (xPath.match(/value/g) || []).length;\n    return {\n      key,\n      level,\n      type: typeof json[key],\n      path: xPath,\n      value: isObject\n        ? // Recursion if object\n          new JsonArray(json[key], xPath + \".value\", this._updateTree)\n        : json[key],\n    };\n  }\n\n  // Internal method that is used to update the array based on the propd\n  // #private method\n  _updateArray(json: Json, idx?: any, subNode?: boolean): void {\n    Object.keys(json).forEach((key) => {\n      const prop = this._createNode(key, json);\n      // If index is present, insert at index\n      // Or push at the end\n\n      if (subNode) {\n        this[idx].type = \"object\";\n        this[idx].value = new JsonArray(\n          json,\n          this[idx].path + \".value\",\n          this._updateTree\n        );\n      } else if (idx) this.splice(idx, 0, prop);\n      else this.push(prop);\n    });\n  }\n}\n","// Tree - A Recursive react component\n// The Tree component that calls itself until its\n// exhausted of objects in the tree\n// Can be optimized and refactored a bit\nimport React, { useState } from \"react\";\nimport { JsonArray } from \"./JsonArrayClass\";\n\ninterface Props {\n  data: JsonArray;\n}\n\nexport const Tree = ({ data, ...props }: Props) => {\n  return (\n    <div className=\"group\">\n      {data.map((item, idx) => {\n        const isObject = item.type === \"object\";\n        return (\n          <div key={item.path} className=\"child node-row\">\n            <div className=\"row-items\">\n              <span\n                className=\"checkbox\"\n                style={{\n                  transform: `translate(-${item.level * 32 + 32}px, 2px)`,\n                }}\n              >\n                <input type={\"checkbox\"} />\n              </span>\n              <span\n                className=\"plus\"\n                onClick={(e) => {\n                  data.addSubNode(idx);\n                }}\n              >\n                {\"âž•\"}\n              </span>\n              <input\n                value={item.key}\n                onChange={(e) => {\n                  data.updateNode(idx, e.target.value);\n                }}\n              />\n              <input\n                value={isObject ? \"Object\" : item.value}\n                disabled={isObject}\n                onChange={(e) => {\n                  data.updateNode(idx, undefined, e.target.value);\n                }}\n              />\n              <span onClick={() => data.deleteNode(idx)}>ðŸ—‘</span>\n            </div>\n            {isObject && <Tree data={item.value} {...props} />}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState } from \"react\";\nimport { Json } from \"./interfaces\";\nimport { JsonArray } from \"./JsonArrayClass\";\nimport { Tree } from \"./Tree\";\nimport \"./style.scss\";\n\n// Component that acts as a state adapter\n// Handles interactions between the tree and the parent component\n\ninterface State {\n  value: JsonArray;\n}\n\ninterface Props {\n  data: Json;\n  onChange?: (state: JsonArray) => void;\n  hasSelection?: boolean;\n}\nexport class JsonEditor extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    // We require state for refreshing the component on data update\n    this.state = { value: new JsonArray() };\n  }\n  componentDidUpdate(_: Props, pState: State) {\n    if (this.state !== pState) this.props.onChange?.(this.state.value);\n  }\n  render() {\n    return (\n      <div\n        className={`react-json-tree ${\n          this.props.hasSelection ? \"has-selection\" : \"\"\n        }`}\n      >\n        <Tree\n          data={new JsonArray(this.props.data, \"\", this.setState.bind(this))}\n        />\n      </div>\n    );\n  }\n}\n\nexport default JsonEditor;\n"],"names":["JsonArray","Array","constructor","json","path","stateUpdater","super","this","_updateTree","value","_updateArray","convertToJSON","treeData","reduce","acc","data","type","key","addNode","idx","addSubNode","length","deleteNode","splice","updateNode","index","undefined","e","console","log","_createNode","isObject","xPath","level","match","subNode","Object","keys","forEach","prop","push","Tree","_a","props","__rest","React","createElement","className","map","item","style","transform","onClick","onChange","target","disabled","assign","styleInject","css","ref","head","insertAt","document","getElementsByTagName","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","JsonEditor","Component","state","componentDidUpdate","_","pState","_b","call","render","hasSelection","setState","bind"],"mappings":"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"}