{"version":3,"file":"index.es.js","sources":["../src/interfaces.ts","../src/v2/TreeUtils.ts","../src/v2/DefaultItemComponent.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/v2/Tree.tsx","../src/v2/useTreeHandler.ts","../src/v2/JsonEditor.tsx"],"sourcesContent":["export interface Json {\n  [key: string]: any;\n}\n\nexport enum DataTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  list = \"list\",\n  object = \"object\",\n  staticList = \"static list\",\n  listOfStrings = \"list of strings\",\n  listOfNumbers = \"list of numbers\",\n  listOfBooleans = \"list of booleans\",\n}\n\nexport const DefaultValues = {\n  string: \"\",\n  number: 0,\n  boolean: true,\n  list: [],\n  listOfStrings: [\"\"],\n  listOfNumbers: [0],\n  listOfBooleans: [true],\n  object: {},\n  \"list of strings\": [\"\"],\n  \"list of numbers\": [0],\n  \"list of booleans\": [true],\n};\n\nexport interface TreeData {\n  key: string;\n  data_type: DataTypes;\n  selected: boolean;\n  sub_object: Array<TreeData>;\n}\n\nexport interface JsonArrayItem {\n  key: string;\n  value: Array<JsonArrayItem> | string | number | boolean;\n  path: string;\n  mode: string;\n  isObject: boolean;\n  selected: boolean;\n  type: string;\n  parent: Array<JsonArrayItem>;\n  level: number;\n}\nexport interface TreeMethods {\n  updateSelection: (siblings: ArrayItem, checked: boolean) => void;\n  addSubItem: (siblings: ArrayItem[], idx: number) => void;\n  updateNodeType: (siblings: ArrayItem, value: string) => void;\n  removeNode: (siblings: ArrayItem[], idx: number) => void;\n  updateKey: (item: ArrayItem, key: string) => void;\n  updateValue?: (item: ArrayItem, response_value: string) => void;\n}\n\nexport interface ArrayItem {\n  key: string;\n  response_value: string;\n  path: string;\n  selected: boolean;\n  display_format: string;\n  data_type?: string;\n  parent: ArrayItem;\n  level: number;\n  sub_object: ArrayItem[];\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { DataTypes, DefaultValues, Json } from \"../interfaces\";\n\nexport abstract class TreeUtils {\n  static convertJSONtoTree(\n    json: Json,\n    parent: Json | undefined,\n    parentKey = \"\",\n    level = 0,\n    parentIndex = 0\n  ): Json[] {\n    return Object.keys(json).map((item, idx) => {\n      const value = json[item];\n\n      const type = TreeUtils.getType(value);\n      const isList = Array.isArray(value);\n      const isObject = type === DataTypes.object || type === DataTypes.list;\n      const path = `${parentKey ? `${parentKey}.` : \"\"}${item}`;\n\n      const isAllPrimitive = isList && !TreeUtils.isAllPrimitive(value);\n      const response_value =\n        type === DataTypes.object || isAllPrimitive ? \"\" : value;\n\n      return {\n        setSubObject: function () {\n          this.sub_object = isObject\n            ? // Recursion\n              TreeUtils.convertJSONtoTree(\n                isList ? TreeUtils.getObjectFromList(value) : value,\n                this,\n                path,\n                level + 1,\n                idx\n              )\n            : [];\n\n          return this;\n        },\n        key: item,\n        response_key: path,\n        parent,\n        parentIndex,\n        level,\n        response_value,\n        selected: false,\n        data_type: type,\n        sub_object: [] as Json[],\n      }.setSubObject();\n    });\n  }\n\n  // Util method to get JSON from the tree/attribute data\n  static convertTreetoJSON = (tree: Json[]): Json => {\n    return tree.reduce((json, treeItem) => {\n      const key = treeItem.key ?? treeItem.response_key.match(/\\w+$/g)?.[0];\n      //@ts-ignore\n      json[key] = treeItem.response_value || DefaultValues[treeItem.data_type];\n      if (treeItem?.sub_object?.length) {\n        // Recursion\n        let value;\n        if (\n          treeItem.data_type === DataTypes.list ||\n          treeItem.data_type === DataTypes.staticList\n        )\n          value = treeItem.meta?.original_value || [\n            TreeUtils.convertTreetoJSON(treeItem.sub_object),\n          ];\n        else value = TreeUtils.convertTreetoJSON(treeItem.sub_object);\n        json[key] = value;\n      }\n      return json;\n    }, {});\n  };\n\n  static transformTree = (\n    tree: Json[],\n    parent: Json | undefined,\n    level = 0,\n    parentIndex = 0\n  ): Json[] => {\n    return tree.map((item, idx) => {\n      item.parent = parent;\n      item.level = level;\n      item.parentIndex = parentIndex;\n      if (item.related_value) item.related_value.parent = item;\n      if (item.transformed_sub_object?.length)\n        item.transformed_sub_object = TreeUtils.transformTree(\n          item.transformed_sub_object,\n          item,\n          level,\n          idx\n        );\n      // Recursion\n      if (item.sub_object?.length)\n        item.sub_object = TreeUtils.transformTree(\n          item.sub_object,\n          item,\n          level + 1,\n          idx\n        );\n      return item;\n    });\n  };\n\n  // Need to optimize this function\n  // Use loadash to pick or omit keys, instead of manually doing stuff\n  static cleanTree = (\n    tree: Json[],\n    removeResponseKey = true,\n    isRequestBody = false,\n    removeResponseValue = true\n  ): Json[] => {\n    return tree.map((item) => {\n      item.parent =\n        item.path =\n        item.level =\n        item.parentIndex =\n        item.setSubObject =\n          undefined;\n      if (removeResponseKey) item.response_key = undefined;\n      if (isRequestBody) {\n        item.selected = undefined;\n        item.value = item?.response_value;\n      }\n\n      if (removeResponseValue) item.response_value = undefined;\n      if (item.related_value) item.related_value.parent = undefined;\n      if (item.transformed_sub_object?.length)\n        item.transformed_sub_object = TreeUtils.cleanTree(\n          item.transformed_sub_object,\n          removeResponseKey,\n          isRequestBody,\n          removeResponseValue\n        );\n      // Recursion\n      if (item.sub_object?.length)\n        item.sub_object = TreeUtils.cleanTree(\n          item.sub_object,\n          removeResponseKey,\n          isRequestBody,\n          removeResponseValue\n        );\n      return item;\n    });\n  };\n\n  static generateNewNode(parent: Json | undefined) {\n    return {\n      key: \"\",\n      response_value: \"\",\n      data_type: \"string\",\n      sub_object: [],\n      path: `${parent?.path ? `${parent?.path}.` : \"\"}key`,\n      level: parent?.level === undefined ? 0 : parent?.level + 1,\n      parent,\n    };\n  }\n\n  static isAllPrimitive(array: Json[]) {\n    return array.every((item) => typeof item !== DataTypes.object);\n  }\n\n  static getPrimitiveArrayType(arr: any[]) {\n    if (!arr.length) return DataTypes.list;\n    if (typeof arr[0] === \"boolean\") return DataTypes.listOfBooleans;\n    if (typeof arr[0] === \"string\") return DataTypes.listOfStrings;\n    if (typeof arr[0] === \"number\") return DataTypes.listOfNumbers;\n  }\n\n  static getType(obj: Json) {\n    if (obj === null || obj === undefined) return \"string\";\n    return Array.isArray(obj)\n      ? TreeUtils.isAllPrimitive(obj)\n        ? this.getPrimitiveArrayType(obj)\n        : DataTypes.list\n      : typeof obj === DataTypes.object\n      ? DataTypes.object\n      : typeof obj;\n  }\n\n  static getObjectFromList(value: Json[]) {\n    return value.reduce((acc: Json, curr: Json) => {\n      if (TreeUtils.getType(curr) === DataTypes.object)\n        Object.keys(curr).forEach((objKey) => {\n          if (!acc[objKey]) acc[objKey] = curr[objKey];\n        });\n      return acc;\n    }, {});\n  }\n}\n","import React from \"react\";\nimport { ArrayItem } from \"../interfaces\";\n\ninterface Props {\n  item: ArrayItem;\n  siblings: ArrayItem[];\n  idx: number;\n  updateSelection: (siblings: ArrayItem, checked: boolean) => void;\n  addSubItem: (siblings: ArrayItem[], idx: number) => void;\n  updateNodeType: (siblings: ArrayItem, value: string) => void;\n  removeNode: (siblings: ArrayItem[], idx: number) => void;\n  updateKey: (item: ArrayItem, key: string) => void;\n  updateValue?: (item: ArrayItem, response_value: string) => void;\n}\n\nfunction DefaultItemComponent({\n  item,\n  siblings,\n  idx,\n  updateSelection,\n  addSubItem,\n  updateNodeType,\n  removeNode,\n  updateKey,\n}: Props) {\n  return (\n    <>\n      <div\n        className=\"checkbox\"\n        style={{ transform: `translateX(-${32 * item.level}px)` }}\n      >\n        <input\n          type=\"checkbox\"\n          checked={item.selected}\n          onChange={(e) => updateSelection(siblings?.[idx], e.target.checked)}\n        />\n      </div>\n      <div className=\"add\" onClick={() => addSubItem(siblings, idx)}>\n        +\n      </div>\n      <div className=\"key\">\n        <input\n          value={item.key}\n          onChange={(e) => updateKey(item, e.target.value)}\n        />\n      </div>\n      <div className=\"type\">\n        <select\n          value={item.data_type}\n          style={{ width: 180 }}\n          onChange={(e) => {\n            updateNodeType(item, e.target.value);\n          }}\n        >\n          <option value=\"list\">Array</option>\n          <option value=\"list of strings\">Array of Strings</option>\n          <option value=\"list of numbers\">Array of Numbers</option>\n          <option value=\"list of booleans\">Array of Booleans</option>\n          <option value=\"static list\">Static List</option>\n          <option value=\"string\">String</option>\n          <option value=\"object\">Object</option>\n          <option value=\"number\">Number</option>\n          <option value=\"boolean\">Boolean</option>\n        </select>\n      </div>\n      <div\n        className=\"remove\"\n        onClick={() => {\n          removeNode(siblings, idx);\n        }}\n      >\n        âž–\n      </div>\n    </>\n  );\n}\n\nexport default DefaultItemComponent;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// Tree - A Recursive react component\n// The Tree component that calls itself until its\n// exhausted of objects in the tree\n// Can be optimized and refactored a bit\nimport React, { useMemo } from \"react\";\nimport { ArrayItem, DataTypes, TreeMethods } from \"../interfaces\";\nimport DefaultItemComponent from \"./DefaultItemComponent\";\nimport \"./style.scss\";\n\ninterface JsonEditorProps {\n  data: ArrayItem[];\n  ItemComponent?: React.ComponentType<any>;\n  treeMethods: TreeMethods;\n}\n\nexport const JsonTree = ({\n  data,\n  ItemComponent,\n  treeMethods,\n}: JsonEditorProps) => {\n  return (\n    <div className={`object`}>\n      {data.map((item, idx: number) => {\n        const rowProps = {\n          siblings: data,\n          item,\n          idx,\n          ...treeMethods,\n        };\n\n        const RowComponent = ItemComponent || DefaultItemComponent;\n\n        return (\n          <div\n            key={idx}\n            className={`item ${item.sub_object?.length ? \"has-children\" : \"\"} ${\n              item.parent?.data_type === DataTypes.staticList\n                ? \"static-list-item\"\n                : \"\"\n            }`}\n          >\n            <RowComponent {...rowProps} />\n\n            {!!item.sub_object?.length && (\n              <JsonTree\n                data={item.sub_object}\n                ItemComponent={ItemComponent}\n                treeMethods={treeMethods}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default JsonTree;\n","import { useCallback } from \"react\";\nimport { ArrayItem, DataTypes, Json } from \"../interfaces\";\nimport { TreeUtils } from \"./TreeUtils\";\n\nexport const useTreeHandler = (mainData: Json[], onChange: any) => {\n  const wrapper = useCallback(\n    (fn: any) =>\n      (...args: any) =>\n        fn(...args) || onChange(mainData),\n    []\n  );\n\n  const addItem = (siblingsList: Json[], parent: Json | undefined) => {\n    siblingsList?.push(TreeUtils.generateNewNode(parent));\n  };\n  const addSubItem = (siblingsList: Json[] | undefined, idx: number) => {\n    if (!siblingsList) return;\n    if (siblingsList[idx].data_type !== DataTypes.list)\n      siblingsList[idx].data_type = DataTypes.object;\n    siblingsList[idx].response_value = \"\";\n    const subObject = siblingsList[idx].sub_object;\n    addItem(subObject, siblingsList[idx]);\n  };\n\n  const selectAllChildren = (item: Json | undefined, checked: boolean) => {\n    item?.sub_object.forEach((subItem: Json) => {\n      subItem.selected = checked;\n      if (subItem?.sub_object?.length) updateSelection(subItem, checked);\n    });\n  };\n\n  const selectAllParent = (item: Json | undefined, checked: boolean) => {\n    if (!item?.parent) return;\n    if (item.parent?.parent) selectAllParent(item?.parent, checked);\n    item.parent.selected = checked;\n  };\n\n  const selectAll = (checked: boolean) => {\n    mainData.forEach((item) => {\n      item.selected = checked;\n      if (item?.sub_object?.length) selectAllChildren(item, checked);\n    });\n  };\n\n  const updateSelection = (\n    item: Json | undefined,\n    checked: boolean,\n    isReverseSelection = false\n  ) => {\n    if (item) item.selected = checked;\n    if (item?.sub_object?.length && !isReverseSelection)\n      selectAllChildren(item, checked);\n    if (checked) selectAllParent(item, true);\n    // This condition gets executed when there is no selection in the parent\n    // This unselects the parent if all children are unselected\n    else if (\n      item &&\n      item.parent &&\n      !item.parent.sub_object.some((item: Json) => item.selected)\n    )\n      updateSelection(item.parent, false, true);\n  };\n\n  const updateNodeType = (item: Json, type: string) => {\n    item.data_type = type;\n    if (type === DataTypes.object)\n      item.sub_object = [TreeUtils.generateNewNode(item)];\n    // else if (type === DataTypes.staticList)\n    //   item.sub_object = TreeUtils.convertJSONtoTree(\n    //     item.originalValue,\n    //     item,\n    //     item.response_key\n    //   );\n    // else if (type === DataTypes.list)\n    //   item.sub_object = TreeUtils.convertJSONtoTree(\n    //     TreeUtils.getObjectFromList(item.originalValue),\n    //     item,\n    //     item.response_key\n    //   );\n  };\n\n  const removeNode = (itemList: Json[] | undefined, idx: number) => {\n    itemList?.splice(idx, 1);\n  };\n\n  const updateKey = (item: ArrayItem, key: string) => {\n    updateNode(item, { key });\n  };\n\n  const updateValue = (item: ArrayItem, value: string) => {\n    updateNode(item, { response_value: value });\n  };\n\n  const updateNode = (item: Json, changes: Json) => {\n    item = Object.assign(item, changes);\n  };\n\n  return {\n    updateSelection: wrapper(updateSelection),\n    updateNodeType: wrapper(updateNodeType),\n    removeNode: wrapper(removeNode),\n    addSubItem: wrapper(addSubItem),\n    addItem: wrapper(addItem),\n    updateKey: wrapper(updateKey),\n    updateValue: wrapper(updateValue),\n    selectAll: wrapper(selectAll),\n    updateNode: wrapper(updateNode),\n  };\n};\n","import React, { forwardRef } from \"react\";\nimport { ArrayItem, Json } from \"../interfaces\";\nimport { TreeUtils } from \"./TreeUtils\";\nimport JsonTree from \"./Tree\";\nimport { useTreeHandler } from \"./useTreeHandler\";\n\nexport const JsonEditor = ({\n  data,\n  ItemComponent,\n  fromTree,\n  onChange,\n}: Json) => {\n  fromTree\n    ? TreeUtils.transformTree(data, undefined)\n    : TreeUtils.convertJSONtoTree(data, undefined);\n\n  const treeMethods = useTreeHandler(data, onChange);\n\n  return (\n    <div className={`schema-editor ${ItemComponent ? \"custom\" : \"default\"}`}>\n      <JsonTree\n        data={data as ArrayItem[]}\n        ItemComponent={ItemComponent}\n        treeMethods={treeMethods}\n      />\n    </div>\n  );\n};\n"],"names":["DataTypes","DefaultValues","string","number","boolean","list","listOfStrings","listOfNumbers","listOfBooleans","object","list of strings","list of numbers","list of booleans","TreeUtils","convertJSONtoTree","json","parent","parentKey","level","parentIndex","Object","keys","map","item","idx","value","type","getType","isList","Array","isArray","isObject","path","isAllPrimitive","response_value","setSubObject","this","sub_object","getObjectFromList","key","response_key","selected","data_type","generateNewNode","undefined","array","every","getPrimitiveArrayType","arr","length","obj","reduce","acc","curr","forEach","objKey","DefaultItemComponent","siblings","updateSelection","addSubItem","updateNodeType","removeNode","updateKey","React","createElement","Fragment","className","style","transform","checked","onChange","e","target","onClick","width","styleInject","css","ref","head","insertAt","document","getElementsByTagName","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","convertTreetoJSON","tree","treeItem","_a","_b","match","_c","let","staticList","_d","meta","original_value","transformTree","related_value","transformed_sub_object","cleanTree","removeResponseKey","isRequestBody","removeResponseValue","JsonTree","data","ItemComponent","treeMethods","rowProps","assign","useTreeHandler","mainData","wrapper","useCallback","args","fn","addItem","siblingsList","push","selectAllChildren","subItem","selectAllParent","isReverseSelection","some","updateNode","changes","itemList","splice","subObject","updateValue","selectAll","JsonEditor","fromTree"],"mappings":"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"}