{"version":3,"file":"index.es.js","sources":["../src/interfaces.ts","../src/v2/TreeUtils.ts","../src/v2/DefaultItemComponent.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/v2/Tree.tsx","../src/v2/useTreeHandler.ts","../src/v2/JsonEditor.tsx"],"sourcesContent":["export interface Json {\n  [key: string]: any;\n}\n\nexport enum DataTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  list = \"list\",\n  object = \"object\",\n  staticList = \"static list\",\n  listOfStrings = \"list of strings\",\n  listOfNumbers = \"list of numbers\",\n  listOfBooleans = \"list of booleans\",\n}\n\nexport const DefaultValues = {\n  string: \"\",\n  number: 0,\n  boolean: true,\n  list: [],\n  listOfStrings: [\"\"],\n  listOfNumbers: [0],\n  listOfBooleans: [true],\n  object: {},\n  \"list of strings\": [\"\"],\n  \"list of numbers\": [0],\n  \"list of booleans\": [true],\n};\n\nexport interface TreeData {\n  key: string;\n  data_type: DataTypes;\n  selected: boolean;\n  sub_object: Array<TreeData>;\n}\n\nexport interface JsonArrayItem {\n  key: string;\n  value: Array<JsonArrayItem> | string | number | boolean;\n  path: string;\n  mode: string;\n  isObject: boolean;\n  selected: boolean;\n  type: string;\n  parent: Array<JsonArrayItem>;\n  level: number;\n}\nexport interface TreeMethods {\n  updateSelection: (siblings: ArrayItem, checked: boolean) => void;\n  addSubItem: (siblings: ArrayItem[], idx: number) => void;\n  updateNodeType: (siblings: ArrayItem, value: string) => void;\n  removeNode: (siblings: ArrayItem[], idx: number) => void;\n  updateKey: (item: ArrayItem, key: string) => void;\n  updateValue?: (item: ArrayItem, response_value: string) => void;\n}\n\nexport interface ArrayItem {\n  key: string;\n  response_value: string;\n  path: string;\n  selected: boolean;\n  display_format: string;\n  data_type?: string;\n  parent: ArrayItem;\n  level: number;\n  sub_object: ArrayItem[];\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { DataTypes, DefaultValues, Json } from \"../interfaces\";\n\nexport abstract class TreeUtils {\n  static convertJSONtoTree(\n    json: Json,\n    parent: Json | undefined,\n    parentKey = \"\",\n    level = 0,\n    parentIndex = 0\n  ): Json[] {\n    return Object.keys(json).map((item, idx) => {\n      const value = json[item];\n\n      const type = TreeUtils.getType(value);\n      const isList = Array.isArray(value);\n      const isObject = type === DataTypes.object || type === DataTypes.list;\n      const path = `${parentKey ? `${parentKey}.` : \"\"}${item}`;\n\n      const isAllPrimitive = isList && !TreeUtils.isAllPrimitive(value);\n      const response_value =\n        type === DataTypes.object || isAllPrimitive ? \"\" : value;\n\n      return {\n        setSubObject: function () {\n          this.sub_object = isObject\n            ? // Recursion\n              TreeUtils.convertJSONtoTree(\n                isList ? TreeUtils.getObjectFromList(value) : value,\n                this,\n                path,\n                level + 1,\n                idx\n              )\n            : [];\n\n          return this;\n        },\n        key: item,\n        response_key: path,\n        parent,\n        parentIndex,\n        level,\n        response_value,\n        selected: false,\n        originalValue: isList ? value : undefined,\n        data_type: type,\n        sub_object: [] as Json[],\n      }.setSubObject();\n    });\n  }\n\n  // Util method to get JSON from the tree/attribute data\n  static convertTreetoJSON = (tree: Json[]): Json => {\n    return tree.reduce((json, treeItem) => {\n      const key = treeItem.key ?? treeItem.response_key.match(/\\w+$/g)?.[0];\n      //@ts-ignore\n      json[key] = treeItem.response_value || DefaultValues[treeItem.data_type];\n      if (treeItem?.sub_object?.length) {\n        // Recursion\n        let value;\n        if (treeItem.data_type === DataTypes.list)\n          value = [TreeUtils.convertTreetoJSON(treeItem.sub_object)];\n        else value = TreeUtils.convertTreetoJSON(treeItem.sub_object);\n        json[key] = value;\n      }\n      return json;\n    }, {});\n  };\n\n  static transformTree = (\n    tree: Json[],\n    parent: Json | undefined,\n    level = 0,\n    parentIndex = 0\n  ): Json[] => {\n    return tree.map((item, idx) => {\n      item.parent = parent;\n      item.level = level;\n      item.parentIndex = parentIndex;\n      // Recursion\n      if (item.sub_object?.length)\n        item.sub_object = TreeUtils.transformTree(\n          item.sub_object,\n          item,\n          level + 1,\n          idx\n        );\n      return item;\n    });\n  };\n\n  // Need to optimize this function\n  // Use loadash to pick or omit keys, instead of manually doing stuff\n  static cleanTree = (\n    tree: Json[],\n    removeResponseKey = true,\n    isRequestBody = false,\n    removeResponseValue = true\n  ): Json[] => {\n    return tree.map((item) => {\n      item.parent =\n        item.path =\n        item.level =\n        item.parentIndex =\n        item.setSubObject =\n          undefined;\n      if (removeResponseKey) item.response_key = undefined;\n      if (isRequestBody) {\n        item.selected = undefined;\n        item.value = item?.response_value;\n      }\n\n      if (removeResponseValue) item.response_value = undefined;\n      // Recursion\n      if (item.sub_object?.length)\n        item.sub_object = TreeUtils.cleanTree(\n          item.sub_object,\n          removeResponseKey,\n          isRequestBody,\n          removeResponseValue\n        );\n      return item;\n    });\n  };\n\n  static generateNewNode(parent: Json | undefined) {\n    return {\n      key: \"\",\n      response_value: \"\",\n      data_type: \"string\",\n      sub_object: [],\n      path: `${parent?.path ? `${parent?.path}.` : \"\"}key`,\n      level: parent?.level === undefined ? 0 : parent?.level + 1,\n      parent,\n    };\n  }\n\n  static isAllPrimitive(array: Json[]) {\n    return array.every((item) => typeof item !== DataTypes.object);\n  }\n\n  static getPrimitiveArrayType(arr: any[]) {\n    if (!arr.length) return DataTypes.list;\n    if (typeof arr[0] === \"boolean\") return DataTypes.listOfBooleans;\n    if (typeof arr[0] === \"string\") return DataTypes.listOfStrings;\n    if (typeof arr[0] === \"number\") return DataTypes.listOfNumbers;\n  }\n\n  static getType(obj: Json) {\n    if (obj === null || obj === undefined) return \"string\";\n    return Array.isArray(obj)\n      ? TreeUtils.isAllPrimitive(obj)\n        ? this.getPrimitiveArrayType(obj)\n        : DataTypes.list\n      : typeof obj === DataTypes.object\n      ? DataTypes.object\n      : typeof obj;\n  }\n\n  static getObjectFromList(value: Json[]) {\n    return value.reduce((acc: Json, curr: Json) => {\n      if (TreeUtils.getType(curr) === DataTypes.object)\n        Object.keys(curr).forEach((objKey) => {\n          if (!acc[objKey]) acc[objKey] = curr[objKey];\n        });\n      return acc;\n    }, {});\n  }\n}\n","import React from \"react\";\nimport { ArrayItem } from \"../interfaces\";\n\ninterface Props {\n  item: ArrayItem;\n  siblings: ArrayItem[];\n  idx: number;\n  updateSelection: (siblings: ArrayItem, checked: boolean) => void;\n  addSubItem: (siblings: ArrayItem[], idx: number) => void;\n  updateNodeType: (siblings: ArrayItem, value: string) => void;\n  removeNode: (siblings: ArrayItem[], idx: number) => void;\n  updateKey: (item: ArrayItem, key: string) => void;\n  updateValue?: (item: ArrayItem, response_value: string) => void;\n}\n\nfunction DefaultItemComponent({\n  item,\n  siblings,\n  idx,\n  updateSelection,\n  addSubItem,\n  updateNodeType,\n  removeNode,\n  updateKey,\n}: Props) {\n  return (\n    <>\n      <div\n        className=\"checkbox\"\n        style={{ transform: `translateX(-${32 * item.level}px)` }}\n      >\n        <input\n          type=\"checkbox\"\n          checked={item.selected}\n          onChange={(e) => updateSelection(siblings?.[idx], e.target.checked)}\n        />\n      </div>\n      <div className=\"add\" onClick={() => addSubItem(siblings, idx)}>\n        +\n      </div>\n      <div className=\"key\">\n        <input\n          value={item.key}\n          onChange={(e) => updateKey(item, e.target.value)}\n        />\n      </div>\n      <div className=\"type\">\n        <select\n          value={item.data_type}\n          style={{ width: 180 }}\n          onChange={(e) => {\n            updateNodeType(item, e.target.value);\n          }}\n        >\n          <option value=\"list\">Array</option>\n          <option value=\"list of strings\">Array of Strings</option>\n          <option value=\"list of numbers\">Array of Numbers</option>\n          <option value=\"list of booleans\">Array of Booleans</option>\n          <option value=\"string\">String</option>\n          <option value=\"object\">Object</option>\n          <option value=\"number\">Number</option>\n          <option value=\"boolean\">Boolean</option>\n        </select>\n      </div>\n      <div\n        className=\"remove\"\n        onClick={() => {\n          removeNode(siblings, idx);\n        }}\n      >\n        âž–\n      </div>\n    </>\n  );\n}\n\nexport default DefaultItemComponent;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// Tree - A Recursive react component\n// The Tree component that calls itself until its\n// exhausted of objects in the tree\n// Can be optimized and refactored a bit\nimport React, { useMemo } from \"react\";\nimport { ArrayItem, DataTypes, TreeMethods } from \"../interfaces\";\nimport DefaultItemComponent from \"./DefaultItemComponent\";\nimport \"./style.scss\";\n\ninterface JsonEditorProps {\n  data: ArrayItem[];\n  ItemComponent?: React.ComponentType<any>;\n  treeMethods: TreeMethods;\n}\n\nexport const JsonTree = ({\n  data,\n  ItemComponent,\n  treeMethods,\n}: JsonEditorProps) => {\n  return (\n    <div className={`object`}>\n      {data.map((item, idx: number) => {\n        const rowProps = {\n          siblings: data,\n          item,\n          idx,\n          ...treeMethods,\n        };\n\n        const RowComponent = useMemo(\n          () => ItemComponent || DefaultItemComponent,\n          [item]\n        );\n\n        return (\n          <React.Fragment key={idx}>\n            <div\n              className={`item ${\n                item.sub_object?.length ? \"has-children\" : \"\"\n              } ${\n                item.parent?.data_type === DataTypes.staticList\n                  ? \"static-list-item\"\n                  : \"\"\n              }`}\n            >\n              <RowComponent {...rowProps} />\n\n              {!!item.sub_object?.length && (\n                <JsonTree\n                  data={item.sub_object}\n                  ItemComponent={ItemComponent}\n                  treeMethods={treeMethods}\n                />\n              )}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default JsonTree;\n","import { useCallback } from \"react\";\nimport { ArrayItem, DataTypes, Json } from \"../interfaces\";\nimport { TreeUtils } from \"./TreeUtils\";\n\nexport const useTreeHandler = (mainData: Json[], onChange: any) => {\n  const wrapper = useCallback(\n    (fn: any) =>\n      (...args: any) =>\n        fn(...args) || onChange(mainData),\n    []\n  );\n\n  const addItem = (siblingsList: Json[], parent: Json | undefined) => {\n    siblingsList?.push(TreeUtils.generateNewNode(parent));\n  };\n  const addSubItem = (siblingsList: Json[] | undefined, idx: number) => {\n    if (!siblingsList) return;\n    if (siblingsList[idx].data_type !== DataTypes.list)\n      siblingsList[idx].data_type = DataTypes.object;\n    siblingsList[idx].response_value = \"\";\n    const subObject = siblingsList[idx].sub_object;\n    addItem(subObject, siblingsList[idx]);\n  };\n\n  const selectAllChildren = (item: Json | undefined, checked: boolean) => {\n    item?.sub_object.forEach((subItem: Json) => {\n      subItem.selected = checked;\n      if (subItem?.sub_object?.length) updateSelection(subItem, checked);\n    });\n  };\n\n  const selectAllParent = (item: Json | undefined, checked: boolean) => {\n    if (!item?.parent) return;\n    if (item.parent?.parent) selectAllParent(item?.parent, checked);\n    item.parent.selected = checked;\n  };\n\n  const selectAll = (checked: boolean) => {\n    mainData.forEach((item) => {\n      item.selected = checked;\n      if (item?.sub_object?.length) selectAllChildren(item, checked);\n    });\n  };\n\n  const updateSelection = (\n    item: Json | undefined,\n    checked: boolean,\n    isReverseSelection = false\n  ) => {\n    if (item) item.selected = checked;\n    if (item?.sub_object?.length && !isReverseSelection)\n      selectAllChildren(item, checked);\n    if (checked) selectAllParent(item, true);\n    // This condition gets executed when there is no selection in the parent\n    // This unselects the parent if all children are unselected\n    else if (\n      item &&\n      item.parent &&\n      !item.parent.sub_object.some((item: Json) => item.selected)\n    )\n      updateSelection(item.parent, false, true);\n  };\n\n  const updateNodeType = (item: Json, type: string) => {\n    item.data_type = type;\n    item.sub_object = [];\n    if (type === DataTypes.object)\n      item.sub_object = [TreeUtils.generateNewNode(item)];\n    else if (type === DataTypes.staticList)\n      item.sub_object = TreeUtils.convertJSONtoTree(\n        item.originalValue,\n        item,\n        item.response_key\n      );\n    else if (type === DataTypes.list)\n      item.sub_object = TreeUtils.convertJSONtoTree(\n        TreeUtils.getObjectFromList(item.originalValue),\n        item,\n        item.response_key\n      );\n  };\n\n  const removeNode = (itemList: Json[] | undefined, idx: number) => {\n    itemList?.splice(idx, 1);\n  };\n\n  const updateKey = (item: ArrayItem, key: string) => {\n    updateNode(item, { key });\n  };\n\n  const updateValue = (item: ArrayItem, value: string) => {\n    updateNode(item, { response_value: value });\n  };\n\n  const updateNode = (item: Json, changes: Json) => {\n    item = Object.assign(item, changes);\n  };\n\n  return {\n    updateSelection: wrapper(updateSelection),\n    updateNodeType: wrapper(updateNodeType),\n    removeNode: wrapper(removeNode),\n    addSubItem: wrapper(addSubItem),\n    addItem: wrapper(addItem),\n    updateKey: wrapper(updateKey),\n    updateValue: wrapper(updateValue),\n    selectAll: wrapper(selectAll),\n    updateNode: wrapper(updateNode),\n  };\n};\n","import React, { forwardRef, useImperativeHandle } from \"react\";\nimport { ArrayItem, Json } from \"../interfaces\";\nimport { TreeUtils } from \"./TreeUtils\";\nimport JsonTree from \"./Tree\";\nimport { useTreeHandler } from \"./useTreeHandler\";\n\nexport const JsonEditor = forwardRef(function JsonEditor(\n  { data, ItemComponent, fromTree, onChange }: Json,\n  ref\n) {\n  if (!data) return null;\n\n  fromTree\n    ? TreeUtils.transformTree(data, undefined)\n    : TreeUtils.convertJSONtoTree(data, undefined);\n\n  const treeMethods = useTreeHandler(data, onChange);\n\n  // Expose certain methods via ref\n  useImperativeHandle(\n    ref,\n    () => ({\n      getJson: () => TreeUtils.convertTreetoJSON([...data]),\n      getTree: () => [...data],\n      selectAll: treeMethods.selectAll,\n      updateSelection: treeMethods.updateSelection,\n    }),\n    []\n  );\n\n  if (!data.length) return null;\n\n  return (\n    <div className={`schema-editor ${ItemComponent ? \"custom\" : \"default\"}`}>\n      <JsonTree\n        data={data as ArrayItem[]}\n        ItemComponent={ItemComponent}\n        treeMethods={treeMethods}\n      />\n    </div>\n  );\n});\n"],"names":["DataTypes","DefaultValues","string","number","boolean","list","listOfStrings","listOfNumbers","listOfBooleans","object","list of strings","list of numbers","list of booleans","TreeUtils","convertJSONtoTree","json","parent","parentKey","level","parentIndex","Object","keys","map","item","idx","value","type","getType","isList","Array","isArray","isObject","path","isAllPrimitive","response_value","setSubObject","this","sub_object","getObjectFromList","key","response_key","selected","originalValue","undefined","data_type","generateNewNode","array","every","getPrimitiveArrayType","arr","length","obj","reduce","acc","curr","forEach","objKey","DefaultItemComponent","siblings","updateSelection","addSubItem","updateNodeType","removeNode","updateKey","React","createElement","Fragment","className","style","transform","checked","onChange","e","target","onClick","width","styleInject","css","ref","head","insertAt","document","getElementsByTagName","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","convertTreetoJSON","tree","treeItem","_a","_b","match","_c","let","transformTree","cleanTree","removeResponseKey","isRequestBody","removeResponseValue","JsonTree","data","ItemComponent","treeMethods","rowProps","assign","RowComponent","useMemo","staticList","useTreeHandler","mainData","wrapper","useCallback","args","fn","addItem","siblingsList","push","selectAllChildren","subItem","selectAllParent","isReverseSelection","some","updateNode","changes","itemList","splice","subObject","updateValue","selectAll","JsonEditor","forwardRef","fromTree","useImperativeHandle","getJson","getTree"],"mappings":"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"}